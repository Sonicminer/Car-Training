local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local function keepActive()
    while true do
        local touchInput = Instance.new("InputObject")
        touchInput.UserInputType = Enum.UserInputType.Touch
        touchInput.Position = Vector2.new(math.random(1, 100), math.random(1, 100))  -- Zuf√§llige Position (Simulation)
        UserInputService.InputBegan:Fire(touchInput)

        wait(600)  -- Alle 10 Minuten
    end
end

spawn(keepActive)

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "JLT Studios | Car Training!",
   LoadingTitle = "Car Training!",
   LoadingSubtitle = "by JLT Studios",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "JLT-Studios", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = false -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üè† Home", nil) -- Title, Image

local Toggle = MainTab:CreateToggle({
   Name = "Auto Claim Mysterious Egg",
   CurrentValue = false,
   Flag = "Autoclaimegg", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().autoclaimegg = (Value);
   end,
})

local Toggle = MainTab:CreateToggle({
   Name = "Auto Claim Achievements",
   CurrentValue = false,
   Flag = "Autoclaimachiv", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().autoclaimachiv = (Value);
   end,
})

local Toggle = MainTab:CreateToggle({
   Name = "Auto Claim Group Chest",
   CurrentValue = false,
   Flag = "Autoclaimgroup", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().autoclaimgroup = (Value);
   end,
})

local Section = MainTab:CreateSection("Rebirth")

local Toggle = MainTab:CreateToggle({
   Name = "Auto Rebirth",
   CurrentValue = false,
   Flag = "Autoreb", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().autoreb = (Value);
   end,
})

local Dropdown = MainTab:CreateDropdown({
   Name = "Rebirth Option",
   Options = {"1","2","3","4","5","6","7","8","9","10","11","12"},
   CurrentOption = {"1"},
   MultipleOptions = false,
   Flag = "Dropdown2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
       getgenv().rebirth = tonumber((table.concat(Options, "\n")));
   end,
})

local EggTab = Window:CreateTab("ü•ö Egg", nil) -- Title, Image

local Dropdown = EggTab:CreateDropdown({
   Name = "Egg Name",
   Options = {"2025 Egg","Basic Egg","Rare Egg","Wood Egg","Sand Egg","Snow Egg","Lava Egg","Aqua Egg","Sakura Egg","Cave Egg","Galaxy Egg"},
   CurrentOption = {"Basic Egg"},
   MultipleOptions = false,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
       getgenv().eggname = (table.concat(Options, "\n"));
   end,
})

local Dropdown = EggTab:CreateDropdown({
   Name = "Egg Amount",
   Options = {"1","3","6"},
   CurrentOption = {"1"},
   MultipleOptions = false,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
       getgenv().eggamount = tonumber(table.concat(Options, "\n"));
   end,
})

local Toggle = EggTab:CreateToggle({
   Name = "Auto Open",
   CurrentValue = false,
   Flag = "AutoOpen", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().autoopen = (Value);
   end,
})

while wait() do
    if getgenv().autoclaimgroup == true then
        game:GetService("ReplicatedStorage").Remotes["Claim Group Reward"]:InvokeServer()
        wait(0)
    end
    if getgenv().autoreb == true then
        game:GetService("ReplicatedStorage").Remotes.Rebirth:InvokeServer(getgenv().rebirth)
        wait(0)
    end
    if getgenv().autoopen == true then
        game:GetService("ReplicatedStorage").Remotes["Buy Egg"]:InvokeServer(getgenv().eggname, getgenv().eggamount)
        game.Workspace.Eggs:FindFirstChild(getgenv().eggname).EggModel.UIPart.UI.MaxDistance = 10000
        wait(0)
    end
    if getgenv().autoclaimegg == true then
        game:GetService("ReplicatedStorage").Remotes["Claim Reward"]:InvokeServer()
        wait(0)
    end
    if getgenv().autoclaimachiv == true then
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("TimePlayed",1)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("TimePlayed",2)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("TimePlayed",3)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("TimePlayed",4)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("TimePlayed",5)

            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("GoldenCrafted",1)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("GoldenCrafted",2)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("GoldenCrafted",3)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("GoldenCrafted",4)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("GoldenCrafted",5)

            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("PotionsUsed",1)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("PotionsUsed",2)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("PotionsUsed",3)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("PotionsUsed",4)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("PotionsUsed",5)

            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("RainbowCrafted",1)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("RainbowCrafted",2)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("RainbowCrafted",3)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("RainbowCrafted",4)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("RainbowCrafted",5)

            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Essence",1)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Essence",2)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Essence",3)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Essence",4)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Essence",5)

            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Wins",1)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Wins",2)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Wins",3)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Wins",4)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Wins",5)

            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Energy",1)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Energy",2)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Energy",3)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Energy",4)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Energy",5)

            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Eggs",1)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Eggs",2)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Eggs",3)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Eggs",4)
            game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer("Eggs",5)
        wait(0)
    end
end
