local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Car Training!",
   LoadingTitle = "Car Training!",
   LoadingSubtitle = "by No one",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "JLT-Studios", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = false -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üè† Home", nil) -- Title, Image

local Toggle = MainTab:CreateToggle({
   Name = "Auto Claim Mysterious Egg",
   CurrentValue = false,
   Flag = "Autoclaimegg", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().autoclaimegg = (Value);
   end,
})

local Toggle = MainTab:CreateToggle({
   Name = "Auto Claim Achievements",
   CurrentValue = false,
   Flag = "Autoclaimachiv", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().autoclaimachiv = (Value);
   end,
})

local Toggle = MainTab:CreateToggle({
   Name = "Auto Claim Group Chest",
   CurrentValue = false,
   Flag = "Autoclaimgroup", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().autoclaimgroup = (Value);
   end,
})

local Section = MainTab:CreateSection("Rebirth")

local Toggle = MainTab:CreateToggle({
   Name = "Auto Rebirth",
   CurrentValue = false,
   Flag = "Autoreb", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().autoreb = (Value);
   end,
})

local Dropdown = MainTab:CreateDropdown({
   Name = "Rebirth Option",
   Options = {"1","2","3","4","5","6","7","8","9","10","11","12"},
   CurrentOption = {"1"},
   MultipleOptions = false,
   Flag = "Dropdown2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
       getgenv().rebirth = tonumber((table.concat(Options, "\n")));
   end,
})

local EggTab = Window:CreateTab("ü•ö Egg", nil) -- Title, Image

local Dropdown = EggTab:CreateDropdown({
   Name = "Egg Name",
   Options = {"2025 Egg","Basic Egg","Rare Egg","Wood Egg","Sand Egg","Snow Egg","Lava Egg","Aqua Egg","Sakura Egg","Cave Egg","Galaxy Egg"},
   CurrentOption = {"Basic Egg"},
   MultipleOptions = false,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
       getgenv().eggname = (table.concat(Options, "\n"));
   end,
})

local Dropdown = EggTab:CreateDropdown({
   Name = "Egg Amount",
   Options = {"1","3","6"},
   CurrentOption = {"1"},
   MultipleOptions = false,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
       getgenv().eggamount = tonumber(table.concat(Options, "\n"));
   end,
})

local Toggle = EggTab:CreateToggle({
   Name = "Auto Open",
   CurrentValue = false,
   Flag = "AutoOpen", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
       getgenv().autoopen = (Value);
   end,
})

while wait() do
    if getgenv().autoclaimgroup == true then
        game:GetService("ReplicatedStorage").Remotes["Claim Group Reward"]:InvokeServer()
        wait(0)
    end
    if getgenv().autoreb == true then
        game:GetService("ReplicatedStorage").Remotes.Rebirth:InvokeServer(getgenv().rebirth)
        wait(0)
    end
    if getgenv().autoopen == true then
        game:GetService("ReplicatedStorage").Remotes["Buy Egg"]:InvokeServer(getgenv().eggname, getgenv().eggamount)
        local EggName = game.Workspace.Eggs:FindFirstChild(getgenv().eggname)
        EggName.EggModel.UIPart.UI.MaxDistance = 10000
        wait(0)
    end
    if getgenv().autoclaimegg == true then
        game:GetService("ReplicatedStorage").Remotes["Claim Reward"]:InvokeServer()
        wait(0)
    end
    if getgenv().autoclaimachiv == true then
        local achievements = {
            "TimePlayed",
            "GoldenCrafted",
            "PotionsUsed",
            "RainbowCrafted",
            "Essence",
            "Wins",
            "Energy",
            "Eggs"
        }
    
        for _, achievement in ipairs(achievements) do
            for i = 1, 10 do
                game:GetService("ReplicatedStorage").Remotes.Achievement:InvokeServer(achievement, i)
            end
        end
        wait(0)
    end
end
